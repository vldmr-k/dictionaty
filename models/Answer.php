<?php

namespace app\models;

use app\models\query\AnswerQuery;

class Answer extends \app\models\base\Answer {

    const SCENARIO_MAKE_ANSWER = 'makeAnswer';

    const SUCCESS_ANSWER_POINT = 1;
    const MAX_FAIL_ANSWERS = 3;

    public function rules()
    {
        $rules = parent::rules();


        $rules[] = [['session_id', 'source_word_id'], 'unique', 'targetAttribute' => ['session_id', 'source_word_id'], 'message' => "You answered yet"];

        //check exist words
        $rules[] = [['source_word_id', 'selected_word_id'], 'exist', 'targetClass' => Word::className(), 'targetAttribute' => 'word_id'];

        //check session exist
        $rules[] = [['session_id'], 'exist', 'targetClass' => Session::className(), 'targetAttribute' => 'session_id'];


        $rules[] = [['answer_id'], 'checkBadAnswerLimit', 'on' => [self::SCENARIO_MAKE_ANSWER]];


        return $rules;
    }

    public function checkBadAnswerLimit($attribute, $params) {
        
    }

    public static function find()
    {
        return new AnswerQuery(get_called_class());
    }

    public function beforeSave()
    {

        if($this->isNewRecord) {
            $sourceWord = $this->sourceWord;
            $selectedWord = $this->selectedWord;

            $this->result = $this->sourceWord->isTranslateCorrect($selectedWord);

            if($this->result) {
                $this->point = self::SUCCESS_ANSWER_POINT;
            }

        }
        
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        if($this->scenario == self::SCENARIO_MAKE_ANSWER) {
            $this->session->updateCounters(['passed_word_cnt' => 1, 'fail_answer_cnt' => !$this->result]);
        }

        parent::afterSave($insert, $changedAttributes);
    }


    public function getSourceWord() {
        return $this->hasOne(Word::className(), ['word_id' => 'source_word_id' ]);
    }

    public function getSelectedWord() {
        return $this->hasOne(Word::className(), ['word_id' => 'selected_word_id']);
    }

    public function getSession() {
        return $this->hasOne(Session::className(), ['session_id' => 'session_id']);
    }
}